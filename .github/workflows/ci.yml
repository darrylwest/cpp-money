name: CI Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-test-demo:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache GCC 14 build
      uses: actions/cache@v4
      id: gcc-cache
      with:
        path: ~/gcc-14
        key: gcc-14.1.0-ubuntu-22.04-${{ runner.arch }}
        
    - name: Install dependencies and build GCC 14
      if: steps.gcc-cache.outputs.cache-hit != 'true'
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install dependencies for building GCC
        sudo apt-get install -y \
          build-essential \
          wget \
          curl \
          tar \
          xz-utils \
          python3-pip \
          clang-format \
          git \
          libspdlog-dev \
          libgmp-dev \
          libmpfr-dev \
          libmpc-dev \
          flex \
          bison \
          texinfo \
          locales \
          locales-all \
          libfmt-dev \
          pkg-config
        
        # Install CMake 3.30+ first
        pip3 install cmake --user
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Generate en_US.UTF-8 locale for std::format locale support
        sudo locale-gen en_US.UTF-8
        sudo update-locale LANG=en_US.UTF-8
        
        # Create GCC build directory
        mkdir -p $HOME/gcc-build
        cd $HOME/gcc-build
        
        # Download GCC 14.1.0 source (stable release)
        echo "Downloading GCC 14.1.0 source..."
        wget https://ftp.gnu.org/gnu/gcc/gcc-14.1.0/gcc-14.1.0.tar.xz
        tar -xf gcc-14.1.0.tar.xz
        cd gcc-14.1.0
        
        # Download prerequisites
        ./contrib/download_prerequisites
        
        # Create build directory
        cd ..
        mkdir gcc-14-build
        cd gcc-14-build
        
        # Configure GCC (minimal build for C++)
        echo "Configuring GCC 14..."
        ../gcc-14.1.0/configure \
          --prefix=$HOME/gcc-14 \
          --enable-languages=c,c++ \
          --disable-multilib \
          --disable-bootstrap \
          --enable-checking=release
        
        # Build GCC (this will take a while)
        echo "Building GCC 14 (this may take 20-30 minutes)..."
        make -j$(nproc)
        
        # Install GCC
        echo "Installing GCC 14..."
        make install
        
        # Set GCC 14 as default
        echo "$HOME/gcc-14/bin" >> $GITHUB_PATH
        export PATH="$HOME/gcc-14/bin:$PATH"
        
        # Update library path
        echo "$HOME/gcc-14/lib64" | sudo tee /etc/ld.so.conf.d/gcc-14.conf
        sudo ldconfig
        
    - name: Setup GCC 14 environment
      run: |
        # Add GCC 14 to PATH for cached builds
        echo "$HOME/gcc-14/bin" >> $GITHUB_PATH
        echo "$HOME/gcc-14/lib64" | sudo tee /etc/ld.so.conf.d/gcc-14.conf
        sudo ldconfig
        
    - name: Install Catch2 v3
      run: |
        # Install Catch2 v3 from source (Ubuntu 22.04 only has v2)
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        git checkout v3.7.1  # Use a stable v3 release
        cmake -B build -S . -DBUILD_TESTING=OFF
        cmake --build build
        sudo cmake --install build
        
    - name: Verify compiler and build tool versions
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        
        echo "=== Compiler Versions ==="
        gcc --version
        g++ --version
        echo "=== CMake Version ==="
        cmake --version
        echo "=== Testing C++23 Support with <print> ==="
        echo '#include <print>' > test_cpp23.cpp
        echo 'int main() { std::println("C++23 with <print> works: {}", 42); return 0; }' >> test_cpp23.cpp
        if g++ -std=c++23 test_cpp23.cpp -o test_cpp23 2>/dev/null; then
          echo "C++23 <print> compilation: SUCCESS"
          ./test_cpp23
        else
          echo "C++23 <print> compilation: FAILED"
          g++ -std=c++23 test_cpp23.cpp -o test_cpp23 -v
          exit 1
        fi
        rm -f test_cpp23.cpp test_cpp23
        
    - name: Initialize build
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        rm -rf build/
        mkdir build
        cd build
        cmake ..
      
    - name: Build project
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        cd build
        make -j4
      
    - name: Run unit tests
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        cd build
        make -j4
        cd ..
        ./build/money_tests
      
    - name: Run shopping cart demo
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        echo "=== Running Shopping Cart Demo ==="
        cd build
        make -j4
        cd ..
        ./build/cart_demo
        
    - name: Verify demo output
      run: |
        export PATH="$HOME/gcc-14/bin:$PATH"
        export LD_LIBRARY_PATH="$HOME/gcc-14/lib64:$LD_LIBRARY_PATH"
        echo "=== Verifying Demo Output Contains Expected Elements ==="
        ./build/cart_demo > demo_output.txt 2>&1
        
        # Check for key elements in demo output
        if grep -q "Shopping Cart Demo" demo_output.txt; then
          echo "✓ Demo title found"
        else
          echo "✗ Demo title missing"
          exit 1
        fi
        
        if grep -q "Cart total:" demo_output.txt; then
          echo "✓ Cart total calculation found"
        else
          echo "✗ Cart total calculation missing"
          exit 1
        fi
        
        if grep -q "Tax (8%):" demo_output.txt; then
          echo "✓ Tax calculation found"
        else
          echo "✗ Tax calculation missing"
          exit 1
        fi
        
        if grep -q "Shopping cart is empty" demo_output.txt; then
          echo "✓ Cart clearing functionality found"
        else
          echo "✗ Cart clearing functionality missing"
          exit 1
        fi
        
        echo "=== Demo Output Verification: SUCCESS ==="
        
    - name: Check code formatting
      run: |
        echo "=== Checking Code Formatting ==="
        clang-format -i include/money/*.hpp src/*.cpp examples/*.hpp examples/*.cpp
        if [ -n "$(git status --porcelain)" ]; then
          echo "✗ Code formatting issues found:"
          git status --porcelain
          git diff
          exit 1
        else
          echo "✓ Code formatting is correct"
        fi