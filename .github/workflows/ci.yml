name: CI Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-test-demo:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies and setup compiler
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install basic development tools
        sudo apt-get install -y \
          build-essential \
          wget \
          software-properties-common \
          python3-pip \
          catch2 \
          clang-format \
          git
        
        # Try to get GCC 13 first (more likely to work on Ubuntu 22.04)
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        
        # Install GCC 13 (fallback if GCC 14 fails)
        if sudo apt-get install -y gcc-13 g++-13; then
          echo "Successfully installed GCC 13"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        else
          echo "GCC 13 failed, using system default GCC"
          gcc --version
        fi
        
        # Install CMake 3.30+
        pip3 install cmake --user
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Verify compiler and build tool versions
      run: |
        echo "=== Compiler Versions ==="
        gcc --version
        g++ --version
        echo "=== CMake Version ==="
        cmake --version
        echo "=== Testing C++23 Support ==="
        echo '#include <iostream>' > test_cpp23.cpp
        echo '#include <format>' >> test_cpp23.cpp
        echo 'int main() { std::cout << std::format("C++23 format works: {}", 42) << std::endl; return 0; }' >> test_cpp23.cpp
        if g++ -std=c++23 test_cpp23.cpp -o test_cpp23 2>/dev/null; then
          echo "C++23 compilation: SUCCESS"
          ./test_cpp23
        else
          echo "C++23 compilation: FAILED, trying C++20"
          echo '#include <iostream>' > test_cpp20.cpp
          echo 'int main() { std::cout << "C++20 works!" << std::endl; return 0; }' >> test_cpp20.cpp
          g++ -std=c++20 test_cpp20.cpp -o test_cpp20 && echo "C++20 compilation: SUCCESS" || echo "C++20 compilation: FAILED"
          rm -f test_cpp20.cpp test_cpp20
        fi
        rm -f test_cpp23.cpp test_cpp23
        
    - name: Initialize build
      run: ./mk init
      
    - name: Build project
      run: ./mk build
      
    - name: Run unit tests
      run: ./mk test
      
    - name: Run shopping cart demo
      run: |
        echo "=== Running Shopping Cart Demo ==="
        ./mk demo
        
    - name: Verify demo output
      run: |
        echo "=== Verifying Demo Output Contains Expected Elements ==="
        ./build/cart_demo > demo_output.txt 2>&1
        
        # Check for key elements in demo output
        if grep -q "Shopping Cart Demo" demo_output.txt; then
          echo "✓ Demo title found"
        else
          echo "✗ Demo title missing"
          exit 1
        fi
        
        if grep -q "Cart total:" demo_output.txt; then
          echo "✓ Cart total calculation found"
        else
          echo "✗ Cart total calculation missing"
          exit 1
        fi
        
        if grep -q "Tax (8%):" demo_output.txt; then
          echo "✓ Tax calculation found"
        else
          echo "✗ Tax calculation missing"
          exit 1
        fi
        
        if grep -q "Shopping cart is empty" demo_output.txt; then
          echo "✓ Cart clearing functionality found"
        else
          echo "✗ Cart clearing functionality missing"
          exit 1
        fi
        
        echo "=== Demo Output Verification: SUCCESS ==="
        
    - name: Check code formatting
      run: |
        echo "=== Checking Code Formatting ==="
        ./mk format
        if [ -n "$(git status --porcelain)" ]; then
          echo "✗ Code formatting issues found:"
          git status --porcelain
          git diff
          exit 1
        else
          echo "✓ Code formatting is correct"
        fi